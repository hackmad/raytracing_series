//! # Recursive ray tracer

extern crate clap;
extern crate rand;
extern crate rand_chacha;

mod algebra;
mod app_config;
mod camera;
mod common;
mod material;
mod object;
mod scene;
mod texture;

use algebra::*;
use app_config::*;
use common::*;
use object::*;
use scene::*;
use std::rc::Rc;
use std::time::Instant;

/// Entry point for the recursive raytracer.
fn main() {
    let config = AppConfig::load();

    let rng = match config.seed {
        Some(seed) => new_seeded_rng(seed),
        None => new_thread_rng(),
    };

    let scene = Scene::new(
        config.scenery,
        config.image_width,
        config.image_height,
        config.bvh_enabled,
        Rc::clone(&rng),
    );

    let image_width = config.image_width as Float;
    let image_height = config.image_height as Float;
    let percent_step = 100.0 / image_height;

    let start = Instant::now();

    println!("P3\n{} {}\n255", config.image_width, config.image_height);

    for j in (0..config.image_height).rev() {
        let y = j as Float;

        let progress = percent_step * (image_height - y);
        eprint!("Progress: {:>6.2}%\r", progress);

        for i in 0..config.image_width {
            let x = i as Float;

            let mut colour = Colour::zero();

            for _s in 0..config.samples_per_pixel {
                let u = (x + rng.clone().float()) / image_width;
                let v = (y + rng.clone().float()) / image_height;

                let r = scene.camera.clone().get_ray(u, v);
                colour += ray_colour(&r, &scene.world, config.max_depth);
            }

            let c = colour
                .to_colour_from_sample(config.samples_per_pixel)
                .to_ppm();
            println!("{}", c);
        }
    }

    eprintln!("Done: {} seconds", start.elapsed().as_secs_f32());
}

/// Recursively traces a ray through the scene and generates the colour seen
/// at the image plane.
///
/// * `ray` - The ray.
/// * `world` - The list of geometric objects.
/// * `depth` - Maximum depth for recursion.
fn ray_colour(ray: &Ray, world: &RcHittable, depth: u32) -> Colour {
    // Terminate the recursion if maximum depth is reached.
    if depth <= 0 {
        return Colour::zero();
    }

    // Note the 0.001 is used to avoid starting the ray inside the surface
    // caused due to floating point approximation errors generated by the
    // intersection routine.
    match world.hit(&ray, 0.001, INFINITY) {
        Some(rec) => {
            // If material did not absorb the ray and scattered it, continue
            // tracing the new ray.
            if let Some(sr) = rec.material.clone().scatter(ray, &rec) {
                ray_colour(&sr.scattered, world, depth - 1) * sr.attenuation
            } else {
                background_colour(ray)
            }
        }

        _ => background_colour(ray),
    }
}

/// Generate a gradient colour for the background.
///
/// * `ray` - The ray.
fn background_colour(ray: &Ray) -> Colour {
    let unit_direction = ray.direction.unit_vector();
    let t = 0.5 * (unit_direction.y() + 1.0);
    Colour::new(1.0, 1.0, 1.0) * (1.0 - t) + Colour::new(0.5, 0.7, 1.0) * t
}
